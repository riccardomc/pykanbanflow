# coding: utf-8

"""
    Kanbanflow API

    Lean project management. Simplified.  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TasksByColumn(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_id': 'str',
        'column_name': 'str',
        'swimlane_id': 'str',
        'swimlane_name': 'str',
        'tasks': 'list[Task]'
    }

    attribute_map = {
        'column_id': 'columnId',
        'column_name': 'columnName',
        'swimlane_id': 'swimlaneId',
        'swimlane_name': 'swimlaneName',
        'tasks': 'tasks'
    }

    def __init__(self, column_id=None, column_name=None, swimlane_id=None, swimlane_name=None, tasks=None):  # noqa: E501
        """TasksByColumn - a model defined in Swagger"""  # noqa: E501
        self._column_id = None
        self._column_name = None
        self._swimlane_id = None
        self._swimlane_name = None
        self._tasks = None
        self.discriminator = None
        self.column_id = column_id
        self.column_name = column_name
        if swimlane_id is not None:
            self.swimlane_id = swimlane_id
        if swimlane_name is not None:
            self.swimlane_name = swimlane_name
        if tasks is not None:
            self.tasks = tasks

    @property
    def column_id(self):
        """Gets the column_id of this TasksByColumn.  # noqa: E501


        :return: The column_id of this TasksByColumn.  # noqa: E501
        :rtype: str
        """
        return self._column_id

    @column_id.setter
    def column_id(self, column_id):
        """Sets the column_id of this TasksByColumn.


        :param column_id: The column_id of this TasksByColumn.  # noqa: E501
        :type: str
        """
        if column_id is None:
            raise ValueError("Invalid value for `column_id`, must not be `None`")  # noqa: E501

        self._column_id = column_id

    @property
    def column_name(self):
        """Gets the column_name of this TasksByColumn.  # noqa: E501


        :return: The column_name of this TasksByColumn.  # noqa: E501
        :rtype: str
        """
        return self._column_name

    @column_name.setter
    def column_name(self, column_name):
        """Sets the column_name of this TasksByColumn.


        :param column_name: The column_name of this TasksByColumn.  # noqa: E501
        :type: str
        """
        if column_name is None:
            raise ValueError("Invalid value for `column_name`, must not be `None`")  # noqa: E501

        self._column_name = column_name

    @property
    def swimlane_id(self):
        """Gets the swimlane_id of this TasksByColumn.  # noqa: E501


        :return: The swimlane_id of this TasksByColumn.  # noqa: E501
        :rtype: str
        """
        return self._swimlane_id

    @swimlane_id.setter
    def swimlane_id(self, swimlane_id):
        """Sets the swimlane_id of this TasksByColumn.


        :param swimlane_id: The swimlane_id of this TasksByColumn.  # noqa: E501
        :type: str
        """

        self._swimlane_id = swimlane_id

    @property
    def swimlane_name(self):
        """Gets the swimlane_name of this TasksByColumn.  # noqa: E501


        :return: The swimlane_name of this TasksByColumn.  # noqa: E501
        :rtype: str
        """
        return self._swimlane_name

    @swimlane_name.setter
    def swimlane_name(self, swimlane_name):
        """Sets the swimlane_name of this TasksByColumn.


        :param swimlane_name: The swimlane_name of this TasksByColumn.  # noqa: E501
        :type: str
        """

        self._swimlane_name = swimlane_name

    @property
    def tasks(self):
        """Gets the tasks of this TasksByColumn.  # noqa: E501


        :return: The tasks of this TasksByColumn.  # noqa: E501
        :rtype: list[Task]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this TasksByColumn.


        :param tasks: The tasks of this TasksByColumn.  # noqa: E501
        :type: list[Task]
        """

        self._tasks = tasks

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TasksByColumn, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TasksByColumn):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
