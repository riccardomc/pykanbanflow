# coding: utf-8

"""
    Kanbanflow API

    Lean project management. Simplified.  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TaskDate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'str',
        'date_type': 'str',
        'due_timestamp': 'str',
        'due_timestamp_local': 'str',
        'target_column_id': 'str'
    }

    attribute_map = {
        'status': 'status',
        'date_type': 'dateType',
        'due_timestamp': 'dueTimestamp',
        'due_timestamp_local': 'dueTimestampLocal',
        'target_column_id': 'targetColumnId'
    }

    def __init__(self, status=None, date_type=None, due_timestamp=None, due_timestamp_local=None, target_column_id=None):  # noqa: E501
        """TaskDate - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._date_type = None
        self._due_timestamp = None
        self._due_timestamp_local = None
        self._target_column_id = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if date_type is not None:
            self.date_type = date_type
        if due_timestamp is not None:
            self.due_timestamp = due_timestamp
        if due_timestamp_local is not None:
            self.due_timestamp_local = due_timestamp_local
        if target_column_id is not None:
            self.target_column_id = target_column_id

    @property
    def status(self):
        """Gets the status of this TaskDate.  # noqa: E501


        :return: The status of this TaskDate.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TaskDate.


        :param status: The status of this TaskDate.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def date_type(self):
        """Gets the date_type of this TaskDate.  # noqa: E501


        :return: The date_type of this TaskDate.  # noqa: E501
        :rtype: str
        """
        return self._date_type

    @date_type.setter
    def date_type(self, date_type):
        """Sets the date_type of this TaskDate.


        :param date_type: The date_type of this TaskDate.  # noqa: E501
        :type: str
        """

        self._date_type = date_type

    @property
    def due_timestamp(self):
        """Gets the due_timestamp of this TaskDate.  # noqa: E501


        :return: The due_timestamp of this TaskDate.  # noqa: E501
        :rtype: str
        """
        return self._due_timestamp

    @due_timestamp.setter
    def due_timestamp(self, due_timestamp):
        """Sets the due_timestamp of this TaskDate.


        :param due_timestamp: The due_timestamp of this TaskDate.  # noqa: E501
        :type: str
        """

        self._due_timestamp = due_timestamp

    @property
    def due_timestamp_local(self):
        """Gets the due_timestamp_local of this TaskDate.  # noqa: E501


        :return: The due_timestamp_local of this TaskDate.  # noqa: E501
        :rtype: str
        """
        return self._due_timestamp_local

    @due_timestamp_local.setter
    def due_timestamp_local(self, due_timestamp_local):
        """Sets the due_timestamp_local of this TaskDate.


        :param due_timestamp_local: The due_timestamp_local of this TaskDate.  # noqa: E501
        :type: str
        """

        self._due_timestamp_local = due_timestamp_local

    @property
    def target_column_id(self):
        """Gets the target_column_id of this TaskDate.  # noqa: E501


        :return: The target_column_id of this TaskDate.  # noqa: E501
        :rtype: str
        """
        return self._target_column_id

    @target_column_id.setter
    def target_column_id(self, target_column_id):
        """Sets the target_column_id of this TaskDate.


        :param target_column_id: The target_column_id of this TaskDate.  # noqa: E501
        :type: str
        """

        self._target_column_id = target_column_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TaskDate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TaskDate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
